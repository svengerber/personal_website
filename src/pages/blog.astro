---
import { readAll } from "../lib/markdoc/read";
import { blog } from "../lib/markdoc/frontmatter.schema";
import PageLayout from "../layouts/PageLayout.astro";
import PageMeta from "../components/PageMeta.astro";
import { SITE_TITLE } from "../config";
import BlogPostPreview from "../components/BlogPostPreview.astro";
import TagBox from "../components/TagBox.astro";

const posts = await readAll({
  directory: "blog",
  frontmatterSchema: blog,
});

const sortedPosts = posts
  .filter((p) => p.frontmatter.draft !== true)
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf()
  );

const uniqueTags = [...new Set(posts
  .filter((post) => post.frontmatter.draft !== true)
  .map((post) => post.frontmatter.tags)
  .flat()
  .sort()
)];

---

<PageLayout>
  <PageMeta title={`${SITE_TITLE} | Blog`} slot="meta" />
  <section slot="main">
    <h1 class="font-extrabold text-2xl md:text-3xl tracking-tight pt-4 pb-3 overflow-hidden">
      <span class="bg-gradient-to-br from-primary-400 via-primary-500 to-primary-600 dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
      Tags
      </span>
    </h1>
    <div class="flex flex-wrap gap-3 pt-1">
      {uniqueTags.map((tag) => (
        <TagBox href={`${import.meta.env.BASE_URL}tag/${tag}`} name={tag}></TagBox>
      ))}
    </div>
    <h1 class="font-extrabold text-2xl md:text-3xl tracking-tight pt-6 overflow-hidden">
      <span class="bg-gradient-to-br from-primary-400 via-primary-500 to-primary-600 dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
      Posts
      </span>
    </h1>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6 pb-6 pt-6">
      {
        sortedPosts.map((post) => 
          <BlogPostPreview post={post}/>
      )}
    </div>
  </section>
</PageLayout>
